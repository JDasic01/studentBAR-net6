@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

@*Lesson 12/13*@

<h3>SampleData</h3>

@if(categoriesCreated)
{
    <h4>Categories created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create categories</button>
}

@if(statusesCreated)
{
    <h4>Statuses created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create statuses</button>
}

<button class="btn btn-primary" @onclick="GenerateSampleData">Sample data</button>

@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                FirstName = "Tim",
                LastName = "Corey",
                EmailAddress = "tim@test.com",
                DisplayName = "SampleTim",
                ObjectIdentifier = "abc-123"
            };
        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-123");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        SuggestionModel suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "First suggestion",
                Description = "Suggestion created by the sample data generation method"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Second suggestion",
                Description = "Suggestion created by the sample data generation method",
                SuggestionStatus=statuses[0],
                OwnerNotes="Note"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "Third suggestion",
                Description = "Suggestion created by the sample data generation method",
                SuggestionStatus=statuses[1],
                OwnerNotes="Note"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                Suggestion = "Fourth suggestion",
                Description = "Suggestion created by the sample data generation method",
                SuggestionStatus=statuses[2],
                UserVotes=votes,
                OwnerNotes="Note"
            };
        await suggestionData.CreateSuggestion(suggestion);

        votes.Add("4");

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                Suggestion = "Fifth suggestion",
                Description = "Suggestion created by the sample data generation method",
                SuggestionStatus=statuses[2],
                UserVotes=votes,
                OwnerNotes="Note"
            };
        await suggestionData.CreateSuggestion(suggestion);
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();
        if(categories?.Count>0)
        {
            return;
        }

        CategoryModel cat = new()
            {
                CategoryName = "Courses",
                CategoryDescription = "Full paid courses."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Dev q",
                CategoryDescription = "Advice"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Tut",
                CategoryDescription = "deep dive"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "10 min",
                CategoryDescription = "quick"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "other",
                CategoryDescription = "else"
            };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if(statuses?.Count>0)
        {
            return;
        }

        StatusModel stat = new()
            {
                StatusName="Completed",
                StatusDescription="Accepted"
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName="Watching",
                StatusDescription="asdaf"
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName="Upcoming",
                StatusDescription="soon"
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName="Dissmisses",
                StatusDescription="Not accepted"
            };
        await statusData.CreateStatus(stat);

        statusesCreated = true;
    }
}
