@page "/CreateFaculty"
@using studentBARUI.Models
@using studentBARUI.Components
@inject IFacultyData facultyData
@inject IUserData userData
@inject IUniversityData universityData
@inject NavigationManager navManager

<h1>Make a Faculty</h1>

<div>
    <div>
        <div>
            <button @onclick="ClosePage"></button>
        </div>
        @if(universities is not null)
        {
            
        }
        <EditForm Model="faculty" OnValidSubmit="CreateNewFaculty">
            <DataAnnotationsValidator  />
            <ValidationSummary/>
            <div>
                <label for="faculty-text">Faculty</label>
                <div>Name of Faculty</div>
                <InputText id="faculty-text" @bind-Value="faculty.FacultyName"/>
            </div>
            <div>
                <label for="university">University</label>
                <div>Choose one uni</div>
                <div>
                    @*<MyInputRadioGroup id="university" @bind-Value="faculty.UniversityId">*@
                       @* @foreach(var u in universities)
                        {
                            <div>
                                <InputRadio Value="@u.UniversityId" id="@u.UniversityId"/>
                                <label for="u.UniversityId">@u.UniversityName - @u.UniversityPlace</label>
                            </div>
                        }*@
                    @*</MyInputRadioGroup>*@
                </div>
            </div>
            <div> 
                <button type="submit">Suggest</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateFacultyModel faculty = new();
    private List<UniversityModel> universities;
    private UserModel loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        universities = await universityData.GetAllUniversities();

        // Replace with user lookup
        loggedInUser = await userData.GetUserFromAuthentication("abc-123");
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task CreateNewFaculty()
    {
        FacultyModel f = new();
        f.FacultyName = faculty.FacultyName;
        f.Author = new BasicUserModel(loggedInUser);
        f.University = universities.Where(u=>u.UniversityId==faculty.UniversityId).FirstOrDefault();

        if(f.University is null)
        {
            faculty.UniversityId = "";
            return;
        }

        await facultyData.CreateFaculty(f);
        faculty = new();
        ClosePage();
    }
}